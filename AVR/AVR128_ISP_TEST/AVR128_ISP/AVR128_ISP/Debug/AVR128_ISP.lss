
AVR128_ISP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e7  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000810  00000000  00000000  00000bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d5  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7a c0       	rjmp	.+244    	; 0x136 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d0       	rcall	.+226    	; 0x1a6 <main>
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LedBlinking>:
static unsigned int count, blinkPeriod, isInput = 0;

void LedBlinking(unsigned int i_blinkPeriod)
{
	//
	if (isInput == 1)
  c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
  d0:	21 30       	cpi	r18, 0x01	; 1
  d2:	31 05       	cpc	r19, r1
  d4:	c9 f4       	brne	.+50     	; 0x108 <LedBlinking+0x40>
	{
		if (blinkPeriod >= i_blinkPeriod)
  d6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <blinkPeriod>
  da:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <blinkPeriod+0x1>
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	70 f0       	brcs	.+28     	; 0x100 <LedBlinking+0x38>
		{
			isSwOnOff = isSwOnOff ^ 0x01;
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	82 27       	eor	r24, r18
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				
			blinkPeriod = 0;
  f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <blinkPeriod+0x1>
  fc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <blinkPeriod>
		}
		PORTC = isSwOnOff;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	85 bb       	out	0x15, r24	; 21
 106:	01 c0       	rjmp	.+2      	; 0x10a <LedBlinking+0x42>
	}
	else {
		PORTC = 0x00;
 108:	15 ba       	out	0x15, r1	; 21
	}
	blinkPeriod++;
 10a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <blinkPeriod>
 10e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <blinkPeriod+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <blinkPeriod+0x1>
 118:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <blinkPeriod>
 11c:	08 95       	ret

0000011e <DigitalInput>:
}

void DigitalInput()
{
	isInput = PINB & 0x01 ? 1:0;
 11e:	86 b3       	in	r24, 0x16	; 22
 120:	81 70       	andi	r24, 0x01	; 1
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 126:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 12a:	08 95       	ret

0000012c <Task10ms>:
}

void Task10ms()
{
	/* Replace with your application function */
	DigitalInput();
 12c:	f8 df       	rcall	.-16     	; 0x11e <DigitalInput>
	LedBlinking(100);
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ca cf       	rjmp	.-108    	; 0xc8 <LedBlinking>
 134:	08 95       	ret

00000136 <__vector_16>:
}


ISR(TIMER0_OVF_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	0b b6       	in	r0, 0x3b	; 59
 142:	0f 92       	push	r0
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	TCNT0 = 6;	
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	82 bf       	out	0x32, r24	; 50
	count ++;
 160:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
 164:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count+0x1>
 16e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
	
	if(count >= 10)
 172:	0a 97       	sbiw	r24, 0x0a	; 10
 174:	28 f0       	brcs	.+10     	; 0x180 <__vector_16+0x4a>
	{
		Task10ms();	
 176:	da df       	rcall	.-76     	; 0x12c <Task10ms>
		count = 0;
 178:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
 17c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
	}
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0b be       	out	0x3b, r0	; 59
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main(void)
{
	DDRC = 0x01;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x00;
 1aa:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;
 1ac:	88 bb       	out	0x18, r24	; 24
	
	
	TCCR0 |= (1 << CS02);
 1ae:	93 b7       	in	r25, 0x33	; 51
 1b0:	94 60       	ori	r25, 0x04	; 4
 1b2:	93 bf       	out	0x33, r25	; 51
	TIMSK |= (1 << TOIE0);
 1b4:	97 b7       	in	r25, 0x37	; 55
 1b6:	91 60       	ori	r25, 0x01	; 1
 1b8:	97 bf       	out	0x37, r25	; 55
	TIMSK = 0x01;
 1ba:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0x06;
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	82 bf       	out	0x32, r24	; 50
	sei();
 1c0:	78 94       	sei
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x1c>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
