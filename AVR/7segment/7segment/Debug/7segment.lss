
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000342  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e0 c0       	rjmp	.+448    	; 0x202 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d7 d0       	rcall	.+430    	; 0x272 <main>
  c4:	f7 c0       	rjmp	.+494    	; 0x2b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LedBlinking>:
unsigned char FND[10]={0x60, 0x3D, 0x79, 0x63, 0x5B, 0x5F, 0x72, 0x7F, 0x7B, 0x77};


void LedBlinking(unsigned int i_blinkPeriod)
{
	if (isInput == 1)
  c8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <isInput>
  cc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <isInput+0x1>
  d0:	21 30       	cpi	r18, 0x01	; 1
  d2:	31 05       	cpc	r19, r1
  d4:	f1 f4       	brne	.+60     	; 0x112 <LedBlinking+0x4a>
	{
		//if (blinkPeriod <= i_blinkPeriod)
		if(blinkPeriod <= 50)
  d6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <blinkPeriod>
  da:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <blinkPeriod+0x1>
  de:	23 33       	cpi	r18, 0x33	; 51
  e0:	31 05       	cpc	r19, r1
  e2:	60 f4       	brcc	.+24     	; 0xfc <LedBlinking+0x34>
		{
			isSwOnOff = isSwOnOff ^ 0x02;
  e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <isSwOnOff>
  e8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <isSwOnOff+0x1>
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	82 27       	eor	r24, r18
  f0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <isSwOnOff+0x1>
  f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <isSwOnOff>
			PORTD = isSwOnOff;
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	10 c0       	rjmp	.+32     	; 0x11c <LedBlinking+0x54>
			//
		}else if(blinkPeriod <= i_blinkPeriod)
  fc:	82 17       	cp	r24, r18
  fe:	93 07       	cpc	r25, r19
 100:	10 f0       	brcs	.+4      	; 0x106 <LedBlinking+0x3e>
		{
			PORTD = 0x0;	
 102:	12 ba       	out	0x12, r1	; 18
 104:	0b c0       	rjmp	.+22     	; 0x11c <LedBlinking+0x54>
		}else{
			PORTD = 0x0;
 106:	12 ba       	out	0x12, r1	; 18
			blinkPeriod = 0;
 108:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <blinkPeriod+0x1>
 10c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <blinkPeriod>
 110:	05 c0       	rjmp	.+10     	; 0x11c <LedBlinking+0x54>
		}
		
	}
	else {
		PORTD = 0x0;
 112:	12 ba       	out	0x12, r1	; 18
		blinkPeriod = 0;
 114:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <blinkPeriod+0x1>
 118:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <blinkPeriod>
	}
	
	blinkPeriod++;
 11c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <blinkPeriod>
 120:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <blinkPeriod+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <blinkPeriod+0x1>
 12a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <blinkPeriod>
 12e:	08 95       	ret

00000130 <DigitalInput>:
	
}

void DigitalInput()
{
	isInput = PIND & 0x01 ? 1:0;
 130:	80 b3       	in	r24, 0x10	; 16
 132:	81 70       	andi	r24, 0x01	; 1
 134:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <isInput>
 138:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <isInput+0x1>
 13c:	08 95       	ret

0000013e <segment_cnt>:
}

void segment_cnt(unsigned int i_segmentPeriod)
{
	if (isInput == 1){
 13e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <isInput>
 142:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <isInput+0x1>
 146:	21 30       	cpi	r18, 0x01	; 1
 148:	31 05       	cpc	r19, r1
 14a:	09 f0       	breq	.+2      	; 0x14e <segment_cnt+0x10>
 14c:	3e c0       	rjmp	.+124    	; 0x1ca <segment_cnt+0x8c>
		if(segmentPeriod>=i_segmentPeriod){
 14e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 152:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 156:	28 17       	cp	r18, r24
 158:	39 07       	cpc	r19, r25
 15a:	08 f4       	brcc	.+2      	; 0x15e <segment_cnt+0x20>
 15c:	40 c0       	rjmp	.+128    	; 0x1de <segment_cnt+0xa0>
			segmentCycle = segmentCycle % 10;
 15e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <segmentCycle>
 162:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <segmentCycle+0x1>
 166:	9a 01       	movw	r18, r20
 168:	ad ec       	ldi	r26, 0xCD	; 205
 16a:	bc ec       	ldi	r27, 0xCC	; 204
 16c:	94 d0       	rcall	.+296    	; 0x296 <__umulhisi3>
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	9c 01       	movw	r18, r24
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	82 0f       	add	r24, r18
 18e:	93 1f       	adc	r25, r19
 190:	9a 01       	movw	r18, r20
 192:	28 1b       	sub	r18, r24
 194:	39 0b       	sbc	r19, r25
 196:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <segmentCycle+0x1>
 19a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <segmentCycle>
			PORTE = FND[segmentCycle];
 19e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <segmentCycle>
 1a2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <segmentCycle+0x1>
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	83 b9       	out	0x03, r24	; 3
			segmentCycle++;
 1ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <segmentCycle>
 1b2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <segmentCycle+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <segmentCycle+0x1>
 1bc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <segmentCycle>
			segmentPeriod = 0;
 1c0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 1c4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <segment_cnt+0xa0>
		}
	} else {
		segmentPeriod = 0;
 1ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 1ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		segmentCycle = 0;
 1d2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <segmentCycle+0x1>
 1d6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <segmentCycle>
		PORTE = 0x7E;
 1da:	8e e7       	ldi	r24, 0x7E	; 126
 1dc:	83 b9       	out	0x03, r24	; 3
		
	}
	segmentPeriod++;
 1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1ec:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 1f0:	08 95       	ret

000001f2 <Task10ms>:

void Task10ms()
{
	/* Replace with your application function */
	
	DigitalInput();
 1f2:	9e df       	rcall	.-196    	; 0x130 <DigitalInput>
	LedBlinking(BYPASS);
 1f4:	84 ef       	ldi	r24, 0xF4	; 244
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	67 df       	rcall	.-306    	; 0xc8 <LedBlinking>
	segment_cnt(BYPASS*10);
 1fa:	88 e8       	ldi	r24, 0x88	; 136
 1fc:	93 e1       	ldi	r25, 0x13	; 19
 1fe:	9f cf       	rjmp	.-194    	; 0x13e <segment_cnt>
 200:	08 95       	ret

00000202 <__vector_16>:
	
}


ISR(TIMER0_OVF_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	0b b6       	in	r0, 0x3b	; 59
 20e:	0f 92       	push	r0
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	TCNT0 = 6;
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	82 bf       	out	0x32, r24	; 50
	count ++;
 22c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 230:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <count+0x1>
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <count+0x1>
 23a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
	
	if(count >= 10)
 23e:	0a 97       	sbiw	r24, 0x0a	; 10
 240:	28 f0       	brcs	.+10     	; 0x24c <__vector_16+0x4a>
	{
		Task10ms();
 242:	d7 df       	rcall	.-82     	; 0x1f2 <Task10ms>
		count = 0;
 244:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count+0x1>
 248:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
	}
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <main>:

int main(void)
{
	DDRE = 0xFF;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	82 b9       	out	0x02, r24	; 2
	DDRD = 0x02;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	81 bb       	out	0x11, r24	; 17
	PORTE = 0x7E;
 27a:	8e e7       	ldi	r24, 0x7E	; 126
 27c:	83 b9       	out	0x03, r24	; 3
	
	
	TCCR0 |= (1 << CS02);
 27e:	83 b7       	in	r24, 0x33	; 51
 280:	84 60       	ori	r24, 0x04	; 4
 282:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
 284:	87 b7       	in	r24, 0x37	; 55
 286:	81 60       	ori	r24, 0x01	; 1
 288:	87 bf       	out	0x37, r24	; 55
	TIMSK = 0x01;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0x06;
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	82 bf       	out	0x32, r24	; 50
	sei();
 292:	78 94       	sei
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x22>

00000296 <__umulhisi3>:
 296:	a2 9f       	mul	r26, r18
 298:	b0 01       	movw	r22, r0
 29a:	b3 9f       	mul	r27, r19
 29c:	c0 01       	movw	r24, r0
 29e:	a3 9f       	mul	r26, r19
 2a0:	70 0d       	add	r23, r0
 2a2:	81 1d       	adc	r24, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	91 1d       	adc	r25, r1
 2a8:	b2 9f       	mul	r27, r18
 2aa:	70 0d       	add	r23, r0
 2ac:	81 1d       	adc	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	91 1d       	adc	r25, r1
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
